//游览器为了能够让代码自上而下执行，首先会开一快内存（栈内存）=>作用域or执行上下文(context)
//1.执行代码
//2.存储变量以及基本数据类型到值 变量存储 a b  值为空
//3.带var的变量会进行变量提升
//4.进入栈中
console.log(a)//5.输出console.log(a),这个时候为undefined。
var a = 12//6.不会再声明变量var a，因为a已经进行变量提升了 ，跳到第2步直接存储值将12与变量a进行关联,
var b = a //7.不会再声明变量var b，因为b已经进行变量提升了 ，跳到第2步将b与a关联所以值是12,
b = 13 //8.b重新赋值将13与b关联 让b的存储值为13,值也就改变来
console.log(b)//9 13


//遇到引用类型值（对象和函数）
//1.开辟一个新的内存(堆内存16进制到内存地址)
//2.把内存存储到堆内存中(对象存储的上键值对,函数存储到上函数体中到代码字符串)
//3.让变量和堆内存关联在一起。
//sum函数执行步骤
//1.开辟出一个栈内存，进行变量和值存储，变量SUM 值为空
//2.变量提升 function sum(...), 存储值变成为一个指向堆内存的指针AF0。
//3.AF0中存储的是"return n+m"
console.log(sum(10,20))//4.代码执行console.log(sum(10,20))此时函数已经存在了，可以执行了
function sum(n,m) {//5.执行到这里直接跳过
    return n + m
}



//函数表达式
console.log(sum1(10,20))//Uncaught TypeError: sum1 is not a function 直接报错来，var声明到只能是变量提升，并不会像函数声明那样进行定义所以报错。
var sum1 =function(n,m) {
    return n+m
}